type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.PresentationError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.common.Utils.sleep;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isNumber;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",

            "Snippet #15",
            "Snippet #16",
            "Snippet #17",
            "Snippet #18",
            "Snippet #19",
            "Snippet #20",
            "Snippet #21",
            "Snippet #22",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();
        final Map<Integer, Integer> secs = new HashMap<>();
        final Map<Integer, Integer> views = new HashMap<>();

        boolean checkSecret = false;
        long freezeTime = 0;
        long awaitTime = 0;
        long sleepDurationSec = 0;
        long sleepLowerBound = 0;
        long sleepUpperBound = 0;

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        static void checkMissingId(Element doc, String url, String id) {
            Element elem = doc.getElementById(id);
            if (elem != null) {
                throw new WrongAnswer("GET " + url +
                    " shouldn't contain an element with id \"" + id + "\", but one was found");
            }
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 87
            () -> postSnippet(14),
            () -> postSnippet(15, 100, 20),
            () -> postSnippet(16),
            () -> postSnippet(17, 0, 5),
            () -> postSnippet(18),
            () -> postSnippet(19, 3, 0),
            () -> postSnippet(20),
            () -> postSnippet(21, 30, 0),

            // test 95
            () -> checkApiCode(14),
            () -> checkWebCode(14),
            () -> checkApiCode(16),
            () -> checkWebCode(16),
            () -> checkApiCode(18),
            () -> checkWebCode(18),
            () -> checkApiCode(20),
            () -> checkWebCode(20),

            // test 103
            () -> {
                freezeTime = System.currentTimeMillis();
                sleep(5000);
                return reloadServer();
            },

            // test 104
            () -> {
                awaitTime = System.currentTimeMillis();
                sleepDurationSec = (awaitTime - freezeTime) / 1000;
                sleepLowerBound = sleepDurationSec;
                sleepUpperBound = sleepLowerBound + 10;
                checkSecret = true;
                return CheckResult.correct();
            },

            // test 105
            () -> checkApiCode(15),
            () -> checkWebCode(15),
            () -> checkApiCode(17),
            () -> checkWebCode(17),
            () -> checkApiCode404(19),
            () -> checkWebCode404(19),
            () -> checkApiCode(21),
            () -> checkWebCode(21),

            // test 113
            () -> checkApiLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),
            () -> checkWebLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),

            // test 115
            () -> checkApiCode(17),
            () -> checkApiCode(17),
            () -> checkWebCode(17),
            () -> checkApiCode404(17),
            () -> checkWebCode404(17),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];
            int time = secs.get(id);
            int views = this.views.get(id);

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
                    .value("time", isInteger(i -> {
                        if (!checkSecret || time == 0) {
                            return i == 0;
                        }
                        int upperBound = (int) (time - sleepLowerBound);
                        int lowerBound = (int) (time - sleepUpperBound);
                        return i >= lowerBound && i <= upperBound;
                    }))
                    .value("views", isInteger(i -> {
                        if (!checkSecret || views == 0) {
                            return i == 0;
                        }
                        boolean result = i == views - 1;
                        this.views.put(id, views - 1);
                        return result;
                    }))

            );

            return CheckResult.correct();
        }

        private CheckResult checkApiCode404(int id) {
            HttpResponse resp = get(API_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);
            int time = secs.get(id);
            int views = this.views.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (time != 0) {
                Element timeSpan = getById(doc, req, "time_restriction", "span");
                String timeText = timeSpan.text();
                int timeOnPage;
                try {
                    timeOnPage = expect(timeText).toContain(1).integers().get(0);
                } catch (PresentationError ex) {
                    return CheckResult.wrong(
                        "GET " + req + " cannot find number of seconds inside \"time_restriction\" span element.\n" +
                        "Full text:\n" + timeSpan
                    );
                }
                int upperBound = (int) (time - sleepLowerBound);
                int lowerBound = (int) (time - sleepUpperBound);

                if (!(timeOnPage >= lowerBound && timeOnPage <= upperBound)) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain time restriction between " + lowerBound
                        + " and " + upperBound + ", found: " + timeOnPage + "\n" +
                        "Full text:\n" + timeSpan);
                }
            } else {
                checkMissingId(doc, req, "time_restriction");
            }

            if (views != 0) {
                Element viewsSpan = getById(doc, req, "views_restriction", "span");
                String viewsText = viewsSpan.text();
                int viewsOnPage = expect(viewsText).toContain(1).integers().get(0);

                if (viewsOnPage != views - 1) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain views restriction equal to " + (views - 1)
                        + ", found: " + viewsOnPage + "\n" +
                        "Full text:\n" + viewsSpan);
                }
                this.views.put(id, views - 1);
            } else {
                checkMissingId(doc, req, "views_restriction");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCode404(int id) {
            HttpResponse resp = get(WEB_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            return postSnippet(id, 0, 0);
        }

        private CheckResult postSnippet(int id, int secs, int views) {
            String snippet = SNIPPETS[id];
            this.secs.put(id, secs);
            this.views.put(id, views);

            HttpResponse resp = post(API_CODE_NEW,
                "{\"code\":\"" + snippet + "\", " +
                    "\"time\": " + secs +", " +
                    "\"views\": " + views + "}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        if (i.length() != 36) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                    .value("time", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                    .value("views", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/resources/templates/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html xmlns:th="http://www.thymeleaf.org" lang="en">
    <head>
        <title> Create </title>
    </head>
    <body>
    <h1>Index</h1>
    <a href="/database">database</a> <br>
    <a href="/code/new">form</a> <br>
    <a href="/code/latest">latest</a>

    </body>
    </html>
  learner_created: true
- name: src/resources/templates/mscript.js
  visible: true
  text: |-
    function send() {
        console.log("inside JS");
        let object = {
            "code": document.getElementById("code_snippet").value
        };

        let json = JSON.stringify(object);

        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/api/code/new', false);
        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        xhr.send(json);

        if (xhr.status == 200) {
          alert("Success!");
        }
    }
  learner_created: true
- name: src/resources/templates/form.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html xmlns:th="http://www.thymeleaf.org" lang="en">
    <head>
        <title> Create </title>
        <script type="text/javascript" th:src="@{/mscript.js}"></script>
        <script >function send() {
        console.log("inside JS");
        let object = {
            "code": document.getElementById("code_snippet").value
        };

        let json = JSON.stringify(object);

        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/api/code/new', false);
        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        xhr.send(json);

        if (xhr.status == 200) {
          alert("Success!");
        }
    }</script>
    </head>
    <body>

    <form>
        <br>
        <textarea rows="4" cols="50" id="code_snippet" name="comment">Enter your Code...</textarea>
        <br>
        <button id="send_snippet" type="submit" onclick="send()">Submit</button>
        </form>
    </body>
    </html>
  learner_created: true
- name: src/resources/templates/error.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html xmlns:th="http://www.thymeleaf.org" lang="en">
    <head>
        <title> Error </title>
    </head>
    <body>
    <h1> Bad Request!!! </h1>
    <p> requested code with id out of range or bad format </p>
    </body>
    </html>
  learner_created: true
- name: src/platform/CodeHTMLController.java
  visible: true
  text: |
    package platform;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;

    @Controller
    public class CodeHTMLController {

        @Autowired
        private CodeRepository codeRepository;

        private CodeDAO codeDAO;

        @Autowired
        public CodeHTMLController(CodeDAO codeDAO){
            this.codeDAO = codeDAO;
        }

        @GetMapping("/code/{id}")
        public String codeForm(@PathVariable String id, Model model){

            if(id.equals("new"))
                return "form";
            else if(id.equals("latest")){
                model.addAttribute("latest", codeDAO.getLatest());
    //          model.addAttribute("latest", codeRepository.getLatest());
                return "latest";
            }
            else {
                try{
                    //long i = Long.parseLong(id);
                    model.addAttribute("code", codeDAO.findById(id));
                    //model.addAttribute("code", codeRepository.get(i));
                    return "code";
                }
                catch (Exception e){
                    System.out.println("bad code id at /code/{id}!");
                    return "error";
                }
            }
        }
    }
  learner_created: true
- name: src/platform/CodeRESTController.java
  visible: true
  text: |
    package platform;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.time.LocalDate;
    import java.util.Collections;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    @RestController
    public class CodeRESTController {

        @Autowired
        private CodeRepository codeRepository;

        private CodeDAO codeDAO;

        @Autowired
        public CodeRESTController(CodeDAO codeDAO){
            this.codeDAO = codeDAO;
        }

        @GetMapping("/api/code/{id}")
        public ResponseEntity getJSON(@PathVariable String id){

            if(id.equals("latest")) {
                List<Code> result = codeDAO.getLatest();
                return new ResponseEntity(result, HttpStatus.OK);
            }
            else {
                try {
                    //int i = Integer.parseInt(id);
    //                Code code = codeRepository.get(i);
                    Code code = codeDAO.findById(id);
                    return new ResponseEntity(code, HttpStatus.OK);

                }
                catch (Exception e) {
                    System.out.println("error at /api/code/{id}, bad id: " + id);
                    return new ResponseEntity(HttpStatus.BAD_REQUEST);
                }
            }
        }

        @GetMapping ("database")
        public ResponseEntity showDatabase(){

            Map<String, String> result = new HashMap<>();
            for(Code c : codeDAO.getAll()) {
                result.put(c.getId(), c.getCode());
                System.out.println(c.getCode());
            }

            return new ResponseEntity(result, HttpStatus.OK);
        }

        @PostMapping ("api/code/new")
        public ResponseEntity updateCode(@RequestBody Code newCode){

            codeRepository.update(newCode);
            codeDAO.save(newCode);
            System.out.println("the new code in the database id: " + newCode.getId());
            return new ResponseEntity(Map.of("id", newCode.getId()), HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/resources/templates/code.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html xmlns:th="http://www.thymeleaf.org" lang="en">
    <head>
        <title> Code </title>
        <link rel="stylesheet"
              href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/styles/default.min.css">
        <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/highlight.min.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
    </head>
    <body>
     <span id="load_date" th:text="${code.getDate()}"/>
     <pre id="code_snippet"><code th:text="${code.getCode()}"></code></pre>
    </body>
    </html>
  learner_created: true
- name: src/platform/Code.java
  visible: true
  text: |-
    package platform;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.github.f4b6a3.uuid.UuidCreator;
    import org.hibernate.annotations.GenericGenerator;
    import org.hibernate.annotations.Type;
    import org.springframework.context.annotation.Scope;
    import org.springframework.stereotype.Component;

    import javax.persistence.*;
    import java.time.LocalDate;
    import java.util.UUID;

    @Entity
    @Table(name="Code")
    public class Code{

        @Id
        @GeneratedValue(generator="system-uuid")
        @GenericGenerator(name="system-uuid", strategy = "uuid")
        @Column(name = "ID")
        private String id;


        public void setId(String id) {
            this.id = id;
        }

        @Column
        private String code;

        public String getId() {
            return id;
        }

        @Column
        private LocalDate date;

        public Code() {
            date = LocalDate.now();
        }

        public Code(String code) {
            this.code = code;
            date = LocalDate.now();
        }

        public void setCode(String code) {
            this.code = code;
        }

        public void setDate(LocalDate date) {
            this.date = date;
        }

        public LocalDate getDate() {
            return date;
        }

        public String getCode() {
            return code;
        }

        @Override
        public String toString() {
            return "Code{" +
                    "id=" + id +
                    ", code='" + code + '\'' +
                    ", date=" + date +
                    '}';
        }
    }
  learner_created: true
- name: src/platform/CodeServiceImpl.java
  visible: true
  learner_created: true
- name: src/platform/CodeRepository.java
  visible: true
  learner_created: true
- name: src/platform/CodeService.java
  visible: true
  learner_created: true
- name: src/platform/CodeInput.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11031#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #105

    The JSON object at key time is incorrect, found 100

    Full JSON:
    {
      &quot;code&quot;: &quot;Snippet #16&quot;,
      &quot;date&quot;: &quot;2022-07-22&quot;,
      &quot;views&quot;: 19,
      &quot;time&quot;: 100
    }

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-07-22 18:04:40.894  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : Starting CodeSharingPlatform using Java 17.0.3 on LAPTOP-VBFHQFG2 with PID 25388 (started by Ansis in C:\Users\Ansis\Desktop\maven\Code Sharing Platform\Code Sharing Platform\task)
    2022-07-22 18:04:40.897  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : No active profile set, falling back to default profiles: default
    2022-07-22 18:04:41.827  INFO 25388 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2022-07-22 18:04:41.874  INFO 25388 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35 ms. Found 1 JPA repository interfaces.
    2022-07-22 18:04:42.362  INFO 25388 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
    2022-07-22 18:04:42.372  INFO 25388 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-07-22 18:04:42.373  INFO 25388 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-07-22 18:04:42.456  INFO 25388 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-07-22 18:04:42.456  INFO 25388 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1514 ms
    2022-07-22 18:04:42.574  INFO 25388 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2022-07-22 18:04:42.742  INFO 25388 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2022-07-22 18:04:42.751  INFO 25388 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../snippets&#39;
    2022-07-22 18:04:42.945  INFO 25388 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2022-07-22 18:04:43.003  INFO 25388 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.32.Final
    2022-07-22 18:04:43.154  INFO 25388 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
    2022-07-22 18:04:43.270  INFO 25388 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2022-07-22 18:04:43.851  INFO 25388 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2022-07-22 18:04:43.859  INFO 25388 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-07-22 18:04:44.157  WARN 25388 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2022-07-22 18:04:44.341  INFO 25388 --- [    Test worker] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
    2022-07-22 18:04:44.761  INFO 25388 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-07-22 18:04:44.798  INFO 25388 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;
    2022-07-22 18:04:44.811  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : Started CodeSharingPlatform in 4.274 seconds (JVM running for 4.889)
    2022-07-22 18:04:45.090  INFO 25388 --- [nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-07-22 18:04:45.090  INFO 25388 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-07-22 18:04:45.091  INFO 25388 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
    Enter the api/code/new
    the new code in the database id: 67ff3c56-09bd-44de-b8a0-156de0b02ecf
    Enter the api/code/new
    the new code in the database id: 510b09ba-bb58-4ef1-ac39-74d611a90752
    Enter the api/code/new
    the new code in the database id: 7b4a1ccf-ced2-4bdb-8955-21d023ef357b
    Enter the api/code/new
    the new code in the database id: 60b7828a-6332-47c1-916c-f7f510e618c8
    Enter the api/code/new
    the new code in the database id: 2ef01d4b-4f5d-439c-9466-b1252ab906f0
    Enter the api/code/new
    the new code in the database id: 87e295d3-b7f7-488a-b12c-0ad08752e72b
    Enter the api/code/new
    the new code in the database id: 0c050147-99b4-4000-80d1-e3a75e7f8cd2
    Enter the api/code/new
    the new code in the database id: 730d4e54-b2c3-409c-8de9-553147cb75d5
    Enter the api/code/new
    the new code in the database id: 66194f98-a2ee-4838-b763-7671415ea620
    Enter the api/code/new
    the new code in the database id: 3342cc91-30f5-401d-8a09-35d8ca1ee22a
    Enter the api/code/new
    the new code in the database id: 458c3738-51cd-4b3d-96d8-51df0fe316ae
    Enter the api/code/new
    the new code in the database id: d5536e84-fc3b-4682-bdad-46f83403254c
    Enter the api/code/new
    the new code in the database id: fb58ade0-bbde-40b1-bec6-45249f9292cb
    Enter the api/code/new
    the new code in the database id: 69841507-a2d4-491e-9c68-ce3c698b18bc
    2022-07-22 18:04:46.713  INFO 25388 --- [       Thread-5] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-07-22 18:04:46.715  INFO 25388 --- [       Thread-5] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2022-07-22 18:04:46.724  INFO 25388 --- [       Thread-5] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-07-22 18:04:46.852  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : Starting CodeSharingPlatform using Java 17.0.3 on LAPTOP-VBFHQFG2 with PID 25388 (started by Ansis in C:\Users\Ansis\Desktop\maven\Code Sharing Platform\Code Sharing Platform\task)
    2022-07-22 18:04:46.852  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : No active profile set, falling back to default profiles: default
    2022-07-22 18:04:47.090  INFO 25388 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2022-07-22 18:04:47.096  INFO 25388 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 6 ms. Found 1 JPA repository interfaces.
    2022-07-22 18:04:47.174  INFO 25388 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
    2022-07-22 18:04:47.175  INFO 25388 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-07-22 18:04:47.176  INFO 25388 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-07-22 18:04:47.210  INFO 25388 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-07-22 18:04:47.211  INFO 25388 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 356 ms
    2022-07-22 18:04:47.239  INFO 25388 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
    2022-07-22 18:04:47.250  INFO 25388 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
    2022-07-22 18:04:47.250  INFO 25388 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../snippets&#39;
    2022-07-22 18:04:47.278  INFO 25388 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2022-07-22 18:04:47.286  INFO 25388 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2022-07-22 18:04:47.326  INFO 25388 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2022-07-22 18:04:47.326  INFO 25388 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-07-22 18:04:47.388  WARN 25388 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2022-07-22 18:04:47.431  INFO 25388 --- [    Test worker] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
    2022-07-22 18:04:47.537  INFO 25388 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-07-22 18:04:47.553  INFO 25388 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;
    2022-07-22 18:04:47.558  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : Started CodeSharingPlatform in 0.727 seconds (JVM running for 7.636)
    2022-07-22 18:04:47.564  INFO 25388 --- [nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-07-22 18:04:47.564  INFO 25388 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-07-22 18:04:47.566  INFO 25388 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
    Enter the api/code/new
    the new code in the database id: 1ec0b5d4-fcc7-4b61-9e84-544380a62705
    Enter the api/code/new
    the new code in the database id: 08527f85-3486-4b93-bb77-41cdec4d4bbc
    Enter the api/code/new
    the new code in the database id: fb0bb0b8-0565-4915-8a60-dc9d933b8a59
    Enter the api/code/new
    the new code in the database id: 42eaf9ed-a1fe-4efd-8adb-1c9a19257879
    Enter the api/code/new
    the new code in the database id: 3773268c-b04b-4382-a5dc-93429398e277
    Enter the api/code/new
    the new code in the database id: a81f9cbf-aa1e-44d9-a04c-1c835fce70cc
    Enter the api/code/new
    the new code in the database id: fc5a94e7-af86-4931-a8b2-dce3bee03538
    Enter the api/code/new
    the new code in the database id: eeb238df-6cb5-4871-b7a2-6355bbe3f62f
    2022-07-22 18:04:53.502  INFO 25388 --- [       Thread-7] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-07-22 18:04:53.503  INFO 25388 --- [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...
    2022-07-22 18:04:53.507  INFO 25388 --- [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2022-07-22 18:04:53.626  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : Starting CodeSharingPlatform using Java 17.0.3 on LAPTOP-VBFHQFG2 with PID 25388 (started by Ansis in C:\Users\Ansis\Desktop\maven\Code Sharing Platform\Code Sharing Platform\task)
    2022-07-22 18:04:53.626  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : No active profile set, falling back to default profiles: default
    2022-07-22 18:04:53.832  INFO 25388 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2022-07-22 18:04:53.838  INFO 25388 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 6 ms. Found 1 JPA repository interfaces.
    2022-07-22 18:04:53.902  INFO 25388 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
    2022-07-22 18:04:53.903  INFO 25388 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-07-22 18:04:53.903  INFO 25388 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2022-07-22 18:04:53.928  INFO 25388 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-07-22 18:04:53.928  INFO 25388 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 299 ms
    2022-07-22 18:04:53.951  INFO 25388 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
    2022-07-22 18:04:53.962  INFO 25388 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
    2022-07-22 18:04:53.962  INFO 25388 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../snippets&#39;
    2022-07-22 18:04:53.992  INFO 25388 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2022-07-22 18:04:53.998  INFO 25388 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2022-07-22 18:04:54.037  INFO 25388 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2022-07-22 18:04:54.037  INFO 25388 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2022-07-22 18:04:54.082  WARN 25388 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2022-07-22 18:04:54.116  INFO 25388 --- [    Test worker] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
    2022-07-22 18:04:54.201  INFO 25388 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2022-07-22 18:04:54.210  INFO 25388 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;
    2022-07-22 18:04:54.215  INFO 25388 --- [    Test worker] platform.CodeSharingPlatform             : Started CodeSharingPlatform in 0.608 seconds (JVM running for 14.294)
    2022-07-22 18:04:54.221  INFO 25388 --- [nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2022-07-22 18:04:54.222  INFO 25388 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2022-07-22 18:04:54.223  INFO 25388 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
  time: Fri, 22 Jul 2022 15:04:54 UTC
record: 5
